name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    name: Deploy
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    environment: Production  # Utilisez l'environnement où vos secrets sont configurés
    steps:
      - uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          name: id_ed25519  # Changement: utilisez id_ed25519 car vous avez une clé ED25519
          if_key_exists: replace

      - name: Debug directory state
        run: |
          echo "=== Current directory contents ==="
          ls -la
          echo "=== SSH key info ==="
          ls -la ~/.ssh/
          echo "=== Free disk space ==="
          df -h

      - name: Generate deployment ID
        id: deployment-id
        run: |
          VERSION=$(date +%Y%m%d%H%M%S)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          DEPLOY_ID="${VERSION}-${COMMIT_HASH}"
          echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
          echo "Deployment ID: $DEPLOY_ID"

      - name: Create deployment package with ZIP
        run: |
          echo "=== Creating deployment package with ZIP ==="
          # Approche alternative avec zip
          zip -r deploy-src.zip . -x "node_modules/*" -x ".next/*" -x ".git/*"
          ls -la deploy-src.zip

      - name: Test basic SSH connection
        run: |
          echo "=== Testing basic SSH connection ==="
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "echo Connection successful; id; pwd"

      - name: Transfer ZIP package and deploy
        id: deploy
        run: |
          echo "=== Transferring and deploying ==="
          # Transfert du package
          echo "Copying ZIP package to server..."
          scp -o "StrictHostKeyChecking=no" deploy-src.zip ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/tmp/
          
          # Déploiement
          echo "Executing deployment script on server..."
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            set -ex  # Affiche les commandes + exit en cas d'erreur
          
            # Variables d'environnement
            export DEPLOY_ID="${{ env.DEPLOY_ID }}"
            export APP_DIR="/home/hargile.eu"
            export DEPLOYMENTS_DIR="$APP_DIR/deployments"
          
            echo "Creating directory structure..."
            mkdir -p $DEPLOYMENTS_DIR/versions/$DEPLOY_ID
          
            echo "Extracting package..."
            unzip -q /tmp/deploy-src.zip -d $DEPLOYMENTS_DIR/versions/$DEPLOY_ID
          
            echo "Creating symlink..."
            if [ -L $DEPLOYMENTS_DIR/current ]; then
              PREVIOUS_VERSION=$(readlink $DEPLOYMENTS_DIR/current | xargs basename)
              echo $PREVIOUS_VERSION > $DEPLOYMENTS_DIR/previous_version
            fi
            rm -f $DEPLOYMENTS_DIR/current
            ln -s $DEPLOYMENTS_DIR/versions/$DEPLOY_ID $DEPLOYMENTS_DIR/current
          
            echo "Building application..."
            cd $DEPLOYMENTS_DIR/current
            npm ci
            npm run build
          
            echo "Deploying with Docker..."
            cd $DEPLOYMENTS_DIR/current/.docker
            docker compose down
            docker compose up -d
          
            echo "Finalizing deployment..."
            echo $DEPLOY_ID > $DEPLOYMENTS_DIR/current_version
            echo "$DEPLOY_ID deployed at $(date)" >> $DEPLOYMENTS_DIR/deploy_history
          
            echo "Cleanup..."
            rm /tmp/deploy-src.zip
          
            echo "Deployment $DEPLOY_ID successful"
          EOF

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment successful! ID: ${{ env.DEPLOY_ID }}"
          else
            echo "❌ Deployment failed!"
          fi
