name: CI/CD Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    name: Deploy
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          name: id_ed25519
          if_key_exists: replace

      - name: Generate deployment version
        id: deployment-version
        run: |
          VERSION=$(date +%Y%m%d%H%M%S)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          DEPLOY_ID="${VERSION}-${COMMIT_HASH}"
          echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
          echo "Deployment ID: $DEPLOY_ID"

      - name: Create deployment package
        run: |
          git archive --format=tar.gz -o deploy-src.tar.gz HEAD
          ls -la deploy-src.tar.gz

      - name: Deploy to server
        id: deploy
        run: |
          # Transfer package to the server
          scp -o "StrictHostKeyChecking=no" deploy-src.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/tmp/

          # Deploy
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            set -e
            export DEPLOY_ID=${{ env.DEPLOY_ID }}
            export APP_DIR=/home/hargile.eu
            export DEPLOYMENTS_DIR=\$APP_DIR/deployments

            # Create directories
            mkdir -p \$DEPLOYMENTS_DIR/versions

            # Save previous version
            if [ -L \$DEPLOYMENTS_DIR/current ]; then
              PREVIOUS_VERSION=\$(readlink \$DEPLOYMENTS_DIR/current | xargs basename)
              echo \$PREVIOUS_VERSION > \$DEPLOYMENTS_DIR/previous_version
            fi

            # Extract files
            mkdir -p \$DEPLOYMENTS_DIR/versions/\$DEPLOY_ID
            tar -xzf /tmp/deploy-src.tar.gz -C \$DEPLOYMENTS_DIR/versions/\$DEPLOY_ID

            # Update symlink
            rm -f \$DEPLOYMENTS_DIR/current
            ln -s \$DEPLOYMENTS_DIR/versions/\$DEPLOY_ID \$DEPLOYMENTS_DIR/current

            # Deploy with Docker - Build inside the container
            cd \$DEPLOYMENTS_DIR/current/.docker

            docker compose down
            DEPLOY_ID=\$DEPLOY_ID docker compose up -d --build

            # Record deployment
            echo \$DEPLOY_ID > \$DEPLOYMENTS_DIR/current_version
            echo \"\$DEPLOY_ID deployed at \$(date)\" >> \$DEPLOYMENTS_DIR/deploy_history

            # Cleanup
            rm /tmp/deploy-src.tar.gz

            # Keep only 5 recent deployments
            cd \$DEPLOYMENTS_DIR/versions
            ls -t | tail -n +6 | xargs rm -rf

            echo 'Deployment completed successfully'
          "
      - name: Configure SSL with Certbot Standalone
        run: |
          # Arrêter les conteneurs
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd /home/hargile.eu/deployments/current/.docker && docker compose down"
          
          # Exécuter Certbot
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "certbot certonly --standalone --non-interactive --agree-tos --email info@hargile.com -d hargile.eu -d www.hargile.eu"
          
          # Créer les répertoires et copier les certificats
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "mkdir -p /home/hargile.eu/deployments/current/.docker/letsencrypt/live/hargile.eu && cp -L /etc/letsencrypt/live/hargile.eu/fullchain.pem /home/hargile.eu/deployments/current/.docker/letsencrypt/live/hargile.eu/ && cp -L /etc/letsencrypt/live/hargile.eu/privkey.pem /home/hargile.eu/deployments/current/.docker/letsencrypt/live/hargile.eu/"
          
          # Ajuster les permissions
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "chmod -R 755 /home/hargile.eu/deployments/current/.docker/letsencrypt"
          
          # Modifier docker-compose.yml
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd /home/hargile.eu/deployments/current/.docker && sed -i 's#- ./custom-conf:/usr/src/lsws-config#- ./custom-conf:/usr/src/lsws-config\\n      - ./letsencrypt:/etc/letsencrypt#' docker-compose.yml && sed -i '/EMAIL=/a\\      - SSL=true\\n      - LETSENCRYPT=true' docker-compose.yml"
          
          # Redémarrer les services
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd /home/hargile.eu/deployments/current/.docker && docker compose up -d"
          
          # Configurer le renouvellement
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "echo '0 3 * * * root certbot renew --quiet --standalone --pre-hook \"docker stop ols-server\" --post-hook \"docker start ols-server\"' > /etc/cron.d/certbot-renewal && chmod 644 /etc/cron.d/certbot-renewal"

      - name: Check deployment health
        id: health-check
        continue-on-error: true
        run: |
          # Wait for services to start
          sleep 30
          
          # Perform health check
          HEALTH_CHECK_URL="https://hargile.eu/api/health"
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Health check attempt $i of $MAX_RETRIES..."
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL || echo "000")
          
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "Health check passed! Site is up and running."
              exit 0
            else
              echo "Health check failed with status $HTTP_STATUS. Retrying in $RETRY_DELAY seconds..."
              sleep $RETRY_DELAY
            fi
          done
          
          echo "Health check failed after $MAX_RETRIES attempts"
          exit 1

      - name: Rollback if deployment failed
        if: steps.health-check.outcome == 'failure'
        run: |
          echo "Deployment health check failed. Initiating rollback..."
          
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            export APP_DIR=/home/hargile.eu
            export DEPLOYMENTS_DIR=\$APP_DIR/deployments
          
            # Check if we have a previous version
            if [ -f \"\$DEPLOYMENTS_DIR/previous_version\" ]; then
              PREVIOUS_VERSION=\$(cat \$DEPLOYMENTS_DIR/previous_version)
              CURRENT_VERSION=\$(cat \$DEPLOYMENTS_DIR/current_version)
          
              echo \"Rolling back from \$CURRENT_VERSION to \$PREVIOUS_VERSION\"
          
              # Update symlink
              rm -f \$DEPLOYMENTS_DIR/current
              ln -s \$DEPLOYMENTS_DIR/versions/\$PREVIOUS_VERSION \$DEPLOYMENTS_DIR/current
          
              # Redeploy
              cd \$DEPLOYMENTS_DIR/current/.docker
              export DEPLOY_ID=\$PREVIOUS_VERSION
              docker compose down
              docker compose up -d
          
              # Record rollback
              echo \$PREVIOUS_VERSION > \$DEPLOYMENTS_DIR/current_version
              echo \"ROLLBACK: from \$CURRENT_VERSION to \$PREVIOUS_VERSION at \$(date)\" >> \$DEPLOYMENTS_DIR/rollback_history
          
              echo \"Rollback to version \$PREVIOUS_VERSION completed.\"
            else
              echo \"No previous version found for rollback!\"
            fi
          "
          
          exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ steps.health-check.outcome }}" = "success" ]; then
            echo "✅ Deployment successful! ID: ${{ env.DEPLOY_ID }}"
          else
            echo "❌ Deployment failed and rollback initiated!"
          fi
