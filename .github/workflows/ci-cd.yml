name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    name: Deploy
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          name: id_ed25519
          if_key_exists: replace

      - name: Generate deployment ID
        id: deployment-id
        run: |
          VERSION=$(date +%Y%m%d%H%M%S)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          DEPLOY_ID="${VERSION}-${COMMIT_HASH}"
          echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
          echo "Deployment ID: $DEPLOY_ID"

      - name: Create deployment package
        run: |
          echo "=== Creating deployment package ==="
          git archive --format=tar.gz -o deploy-src.tar.gz HEAD
          ls -la deploy-src.tar.gz

      # Création des fichiers Docker dans le dépôt
      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOF'
  #!/bin/bash
  set -ex
  
  # Variables d'environnement
  DEPLOY_ID=$1
  APP_DIR="/home/hargile.eu"
  DEPLOYMENTS_DIR="$APP_DIR/deployments"
  
  # Structure des répertoires
  mkdir -p $DEPLOYMENTS_DIR/versions/$DEPLOY_ID
  
  # Extraction
  tar -xzf /tmp/deploy-src.tar.gz -C $DEPLOYMENTS_DIR/versions/$DEPLOY_ID
  
  # Symlink
  if [ -L $DEPLOYMENTS_DIR/current ]; then
  PREVIOUS_VERSION=$(readlink $DEPLOYMENTS_DIR/current | xargs basename)
  echo $PREVIOUS_VERSION > $DEPLOYMENTS_DIR/previous_version
  fi
  rm -f $DEPLOYMENTS_DIR/current
  ln -s $DEPLOYMENTS_DIR/versions/$DEPLOY_ID $DEPLOYMENTS_DIR/current
  
  # Déploiement Docker
  cd $DEPLOYMENTS_DIR/current
  cp .docker/nextjs.Dockerfile .docker/docker-compose.yml $DEPLOYMENTS_DIR/versions/$DEPLOY_ID/.docker/
  
  cd $DEPLOYMENTS_DIR/current/.docker
  docker compose down
  DEPLOY_ID=$DEPLOY_ID docker compose up -d --build
  
  # Finalisation
  echo $DEPLOY_ID > $DEPLOYMENTS_DIR/current_version
  echo "$DEPLOY_ID deployed at $(date)" >> $DEPLOYMENTS_DIR/deploy_history
  
  # Nettoyage
  rm /tmp/deploy-src.tar.gz
  cd $DEPLOYMENTS_DIR/versions
  ls -t | tail -n +6 | xargs rm -rf
  
  echo "Deployment $DEPLOY_ID successful"
  EOF
  chmod +x deploy.sh
  
  mkdir -p .docker
  
  # Création du Dockerfile
  cat > .docker/nextjs.Dockerfile << 'EOF'
  FROM node:20-alpine AS builder
  WORKDIR /app
  COPY . .
  RUN npm ci
  RUN npm run build
  
  FROM node:20-alpine
  WORKDIR /app
  COPY --from=builder /app/node_modules ./node_modules
  COPY --from=builder /app/.next ./.next
  COPY --from=builder /app/public ./public
  COPY --from=builder /app/next.config.js ./next.config.js
  COPY --from=builder /app/package.json ./package.json
  
  ENV NODE_ENV=production
  EXPOSE 3000
  CMD ["npm", "start"]
  EOF
  
  # Création du docker-compose.yml
  cat > .docker/docker-compose.yml << 'EOF'
version: '3'

services:
  openlitespeed:
    image: litespeedtech/openlitespeed:latest
    container_name: ols-server
    ports:
      - "80:80"
      - "443:443"
      - "7080:7080"
    volumes:
      - ./custom-conf:/usr/src/lsws-config
      - ./static:/usr/local/lsws/Example/html/static
    environment:
      - TZ=Europe/Brussels
      - DOMAIN=hargile.eu
      - EMAIL=gogolus2000@gmail.com
    restart: always
    entrypoint: [ "/usr/src/lsws-config/entrypoint.sh" ]
    command: [ "/entrypoint.sh" ]
    networks:
      - app-network

  nextjs:
    build:
      context: ..
      dockerfile: .docker/nextjs.Dockerfile
    container_name: nextjs-app
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_DEPLOY_ID=${DEPLOY_ID:-local}
    restart: always
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
  EOF

  - name: Transfer package and deploy
    id: deploy
    run: |
      echo "=== Transferring and deploying ==="
      scp -o "StrictHostKeyChecking=no" deploy-src.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/tmp/
      scp -o "StrictHostKeyChecking=no" deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/tmp/
      scp -o "StrictHostKeyChecking=no" -r .docker ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/tmp/
      
      ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "bash /tmp/deploy.sh ${{ env.DEPLOY_ID }}"

  - name: Notify deployment status
    if: always()
    run: |
      if [ "${{ job.status }}" = "success" ]; then
        echo "✅ Deployment successful! ID: ${{ env.DEPLOY_ID }}"
      else
        echo "❌ Deployment failed!"
      fi
