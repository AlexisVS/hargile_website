name: CI/CD Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    name: Deploy
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          name: id_ed25519
          if_key_exists: replace

      - name: Generate deployment ID
        run: |
          DEPLOY_ID=$(date +%Y%m%d%H%M%S)-$(git rev-parse --short HEAD)
          echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
          echo "Deployment ID: $DEPLOY_ID"


      - name: Create deployment package
        run: |
          git archive --format=tar.gz -o deploy-src.tar.gz HEAD
          ls -la deploy-src.tar.gz


      - name: Deploy to server
        run: |
          # Transfer package
          scp -o "StrictHostKeyChecking=no" deploy-src.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/tmp/
          
          # Deploy
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            set -e
            export DEPLOY_ID=${{ env.DEPLOY_ID }}
            export APP_DIR=/home/hargile.eu
            export DEPLOYMENTS_DIR=\$APP_DIR/deployments
          
            # Create directories
            mkdir -p \$DEPLOYMENTS_DIR/versions/\$DEPLOY_ID
          
            # Extract files
            tar -xzf /tmp/deploy-src.tar.gz -C \$DEPLOYMENTS_DIR/versions/\$DEPLOY_ID
          
            # Update symlink
            if [ -L \$DEPLOYMENTS_DIR/current ]; then
              PREVIOUS_VERSION=\$(readlink \$DEPLOYMENTS_DIR/current | xargs basename)
              echo \$PREVIOUS_VERSION > \$DEPLOYMENTS_DIR/previous_version
            fi
            rm -f \$DEPLOYMENTS_DIR/current
            ln -s \$DEPLOYMENTS_DIR/versions/\$DEPLOY_ID \$DEPLOYMENTS_DIR/current
          
            # Deploy with Docker
            cd \$DEPLOYMENTS_DIR/current/.docker
            docker compose down
            DEPLOY_ID=\$DEPLOY_ID docker compose up -d --build
          
            # Cleanup
            echo \$DEPLOY_ID > \$DEPLOYMENTS_DIR/current_version
            rm /tmp/deploy-src.tar.gz
          
            # Keep only 5 recent deployments
            cd \$DEPLOYMENTS_DIR/versions
            ls -t | tail -n +6 | xargs rm -rf
          
            echo 'Deployment completed'
          "


      - name: Configure SSL Certificate
        run: |
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            set -e

            # Se placer dans le répertoire du conteneur OpenLiteSpeed
            cd /home/hargile.eu/deployments/current/.docker

            # Exécuter la commande de configuration Let's Encrypt dans le conteneur
            docker exec ols-server bash -c '/usr/local/lsws/bin/lswsctrl restart'
            docker exec ols-server bash -c 'certbot --non-interactive --agree-tos --email gogolus2000@gmail.com --webroot -w /var/www/html -d hargile.eu -d www.hargile.eu'

            # Redémarrer pour appliquer les changements
            docker exec ols-server bash -c '/usr/local/lsws/bin/lswsctrl restart'

            echo 'SSL Certificate configured successfully'
          "

      - name: Notify status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment successful! ID: ${{ env.DEPLOY_ID }}"
          else
            echo "❌ Deployment failed!"
          fi
