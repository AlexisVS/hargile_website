name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate deployment ID
        id: deployment-id
        run: |
          # Générer un ID de déploiement unique
          VERSION=$(date +%Y%m%d%H%M%S)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          DEPLOY_ID="${VERSION}-${COMMIT_HASH}"
          echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
          
          # Créer une archive du code source
          zip -q -r deploy-package.zip .
          
          echo "Déploiement ID: $DEPLOY_ID"

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          name: id_ed25519
          if_key_exists: replace

      - name: Prepare deployment scripts
        run: |
          chmod +x .github/prepare-deploy.sh
          chmod +x .github/startup.sh

      - name:
          Deploy - Step 1: Transfer files
        run: |
          # Transférer l'archive et les scripts de déploiement
          echo "Transfert des fichiers vers le serveur..."
          scp -o "StrictHostKeyChecking=no" deploy-package.zip ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/tmp/
          scp -o "StrictHostKeyChecking=no" .github/prepare-deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/tmp/
          scp -o "StrictHostKeyChecking=no" .github/startup.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/tmp/
          
          echo "Fichiers transférés avec succès"

      - name:
          Deploy - Step 2: Prepare deployment
        run: |
          # Exécuter le script de préparation
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            chmod +x /tmp/prepare-deploy.sh && 
            /tmp/prepare-deploy.sh ${{ env.DEPLOY_ID }}
          "

      - name:
          Deploy - Step 3: Start application
        run: |
          # Exécuter le script de démarrage
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            chmod +x /tmp/startup.sh && 
            /tmp/startup.sh ${{ env.DEPLOY_ID }}
          "

      - name: Verify deployment
        if: success()
        run: |
          # Vérifier que l'application est bien démarrée
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            cd /home/hargile.eu/ && 
            if [ -L deployments/current ] && [ -f deployments/current_version ]; then
              echo 'Déploiement vérifié avec succès'
              docker ps
            else
              echo 'ERREUR: Déploiement non vérifié'
              exit 1
            fi
          "

      - name: Rollback if verification fails
        if: failure()
        run: |
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            cd /home/hargile.eu/ && 
            if [ -f deployments/previous_version ] && [ -d deployments/versions/\$(cat deployments/previous_version) ]; then
              PREV_VERSION=\$(cat deployments/previous_version)
              echo \"Rollback vers \$PREV_VERSION\"
              rm -f deployments/current
              ln -sf deployments/versions/\$PREV_VERSION deployments/current
              cd deployments/current/.docker
              docker compose down
              docker compose up -d
              echo \"Rollback terminé\"
            else
              echo \"Impossible d'effectuer le rollback: pas de version précédente\"
            fi
          "
